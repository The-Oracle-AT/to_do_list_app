#importing necessary libraries
from flask_sqlalchemy import SQLAlchemy
from flask import request, Flask, jsonify

#initializing the database and SQLAlchemy for the app instance
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'
db = SQLAlchemy(app)

#Defining the database model
class ToDoItem(db.Model):
    id = db.Column(db.Integer, primary_key=True) #typically generated by database system
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500), nullable=False)
    completed = db.Column(db.Boolean, default=False)
    
    def __repr__(self):
        return f'<ToDoItem {self.id}>' #returns a string representation of the object

#Creating a new to-do item
@app.route('/todo/create', methods=['POST'])
def create_todo():
    #requesting dat from json and assigning it to variables
    title = request.json['title']
    description = request.json['description']
    completed = request.json['completed']
    new_todo_item = ToDoItem(title=title, description=description, completed=completed)
    try:
        db.session.add(new_todo_item) #preparing to save in-session
        db.session.commit() # saving item to database
        return jsonify({'message': 'To-do item created!'})
    except:
        db.session.rollback()
        db.create_all()
        db.session.add(new_todo_item) #preparing to save in-session
        db.session.commit() # saving item to database
        return jsonify({'message': 'To-do item created!'})

# Getting all to-do items
@app.route('/todo/get', methods=['GET'])
def get_all_todos():
    all_todo_items = ToDoItem.query.all()
    output = []
    for todo_item in all_todo_items:
        todo_data = {}
        todo_data['id'] = todo_item.id
        todo_data['title'] = todo_item.title
        todo_data['description'] = todo_item.description
        todo_data['completed'] = todo_item.completed
        output.append(todo_data)
    return jsonify({'todo_items': output})

# Getting a single to-do item by id
@app.route('/todo/get/<int:id>', methods=['GET'])
def get_todo_by_id(id):
    todo_item = ToDoItem.query.get_or_404(id) #querying the database for a specific item
    todo_data = {}
    todo_data['id'] = todo_item.id
    todo_data['title'] = todo_item.title
    todo_data['description'] = todo_item.description
    todo_data['completed'] = todo_item.completed
    return jsonify(todo_data)

# Updating a to-do item
@app.route('/todo/update/<int:id>', methods=['PUT'])
def update_todo_by_id(id):
    todo_item = ToDoItem.query.get_or_404(id)
    
    # Check if the request is valid JSON
    data = request.get_json()
    if data is None:
        return jsonify({'error': 'Invalid JSON data'}), 400  # Bad Request

    #requesting data from json and assigning it to variables
    title = request.json['title']
    description = request.json['description']
    completed = request.json['completed']
    todo_item.title = title
    todo_item.description = description
    todo_item.completed = completed
    db.session.commit()
    return jsonify({'message': 'To-do item updated!'})

# Deleting a to-do item
@app.route('/todo/delete/<int:id>', methods=['DELETE'])
def delete_todo_by_id(id):
    todo_item = ToDoItem.query.get_or_404(id)
    db.session.delete(todo_item)
    db.session.commit()
    return jsonify({'message': 'To-do item deleted!'})

# Running the app
if __name__ == '__main__':
    app.run(debug=True)
